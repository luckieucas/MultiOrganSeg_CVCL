#    Copyright 2020 Division of Medical Image Computing, German Cancer Research Center (DKFZ), Heidelberg, Germany
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.


from collections import OrderedDict
from typing import Tuple
from multiprocessing import Pool



import numpy as np
import torch
import shutil
import torch.backends.cudnn as cudnn
from time import time, sleep
from nnunet.configuration import default_num_threads
from nnunet.evaluation.evaluator import aggregate_scores,aggregate_scores_withtags
from nnunet.postprocessing.connected_components import determine_postprocessing
from nnunet.inference.segmentation_export import save_segmentation_nifti_from_softmax
from nnunet.training.loss_functions.deep_supervision import MultipleOutputLoss2withTags, MultipleOutputLoss2withTags_pann
from nnunet.utilities.to_torch import maybe_to_torch, to_cuda
from nnunet.training.data_augmentation.default_data_augmentation import get_moreDA_augmentation
from nnunet.network_architecture.generic_UNet import Generic_UNet
from nnunet.network_architecture.initialization import InitWeights_He
from nnunet.network_architecture.neural_network import SegmentationNetwork
from nnunet.training.data_augmentation.default_data_augmentation import default_2D_augmentation_params, \
    get_patch_size, default_3D_augmentation_params
from nnunet.training.dataloading.dataset_loading import load_dataset, unpack_dataset
from nnunet.training.dataloading.dataset_loading import DataLoader3DwithTag as DataLoader3D
from nnunet.training.dataloading.dataset_loading import DataLoader3DwithTagSemi as DataLoader3DSemi
from nnunet.training.dataloading.dataset_loading import DataLoader2DwithTag as DataLoader2D
from nnunet.training.dataloading.dataset_loading import unpack_dataset
from nnunet.training.network_training.nnUNetTrainer import nnUNetTrainer
from nnunet.utilities.nd_softmax import softmax_helper
from torch import nn
import torch.nn.functional as F
from torch.nn.utils import clip_grad_norm_
from nnunet.training.learning_rate.poly_lr import poly_lr
from batchgenerators.utilities.file_and_folder_operations import *
from nnunet.training.dataloading.switch_dataloader import switchable_generator
from tqdm import trange
from nnunet.training.loss_functions.dice_loss import DC_CE_Marginal_Exclusion_loss,DC_and_CE_loss,pann_loss
from nnunet.training.loss_functions.cac_loss import CAC

try:
    from apex import amp
except ImportError:
    amp = None


class nnUNetMultiTrainerV2(nnUNetTrainer):
    """
    Info for Fabian: same as internal nnUNetTrainerV2_2
    """

    def __init__(self, plans_file, fold, tasks,tags, output_folder_dict=None, dataset_directory_dict=None, batch_dice=True, stage=None,
                 unpack_data=True, deterministic=True, fp16=False, do_semi=False,wandb=None, config=None):
        """
        :param deterministic:
        :param fold: can be either [0 ... 5) for cross-validation, 'all' to train on all available training data or
        None if you wish to load some checkpoint and do inference only
        :param plans_file: the pkl file generated by preprocessing. This file will determine all design choices
        :param subfolder_with_preprocessed_data: must be a subfolder of dataset_directory (just the name of the folder,
        not the entire path). This is where the preprocessed data lies that will be used for network training. We made
        this explicitly available so that differently preprocessed data can coexist and the user can choose what to use.
        Can be None if you are doing inference only.
        :param output_folder: where to store parameters, plot progress and to the validation
        :param dataset_directory: the parent directory in which the preprocessed Task data is stored. This is required
        because the split information is stored in this directory. For running prediction only this input is not
        required and may be set to None
        :param batch_dice: compute dice loss for each sample and average over all samples in the batch or pretend the
        batch is a pseudo volume?
        :param stage: The plans file may contain several stages (used for lowres / highres / pyramid). Stage must be
        specified for training:
        if stage 1 exists then stage 1 is the high resolution stage, otherwise it's 0
        :param unpack_data: if False, npz preprocessed data will not be unpacked to npy. This consumes less space but
        is considerably slower! Running unpack_data=False with 2d should never be done!

        IMPORTANT: If you inherit from nnUNetTrainer and the init args change then you need to redefine self.init_args
        in your init accordingly. Otherwise checkpoints won't load properly!
        """
        self.fp16 = fp16
        self.amp_initialized = False
        self.x_tags = None
        self.y_tags = None

        if deterministic:
            np.random.seed(12345)
            torch.manual_seed(12345)
            if torch.cuda.is_available():
                torch.cuda.manual_seed_all(12345)
            cudnn.deterministic = True
            torch.backends.cudnn.benchmark = False
        else:
            cudnn.deterministic = False
            torch.backends.cudnn.benchmark = True

        ################# SET THESE IN self.initialize() ###################################
        self.network: Tuple[SegmentationNetwork, nn.DataParallel] = None
        self.optimizer = None
        self.lr_scheduler = None
        self.tr_gen = self.val_gen = None
        self.was_initialized = False

        ################# SET THESE IN INIT ################################################
        self.output_folder = None
        self.fold = None
        self.dataset_directory = None

        ################# SET THESE IN LOAD_DATASET OR DO_SPLIT ############################
        self.dataset = None  # these can be None for inference mode
        # do not need to be used, they just appear if you are using the suggested load_dataset_and_do_split
        self.dataset_tr = self.dataset_val = None

        ################# THESE DO NOT NECESSARILY NEED TO BE MODIFIED #####################
        self.patience = 50
        self.val_eval_criterion_alpha = 0.9  # alpha * old + (1-alpha) * new
        # if this is too low then the moving average will be too noisy and the training may terminate early. If it is
        # too high the training will take forever
        self.train_loss_MA_alpha = 0.93  # alpha * old + (1-alpha) * new
        # new MA must be at least this much better (smaller)
        self.train_loss_MA_eps = 5e-4
        self.save_every = 1
        self.save_latest_only = True
        self.max_num_epochs = config['max_num_epochs']
        self.stage_2_start_epoch = config['stage_2_start_epoch'] # 120
        self.stage_3_start_epoch = config['stage_3_start_epoch']
        self.num_batches_per_epoch = 250
        self.num_val_batches_per_epoch = 10
        self.also_val_in_tr_mode = False
        # the network will not terminate training if the lr is still above this threshold
        self.lr_threshold = 1e-6

        ################# LEAVE THESE ALONE ################################################
        self.val_eval_criterion_MA = None
        self.train_loss_MA = None
        self.best_val_eval_criterion_MA = None
        self.best_MA_tr_loss_for_patience = None
        self.best_epoch_based_on_MA_tr_loss = None
        self.all_tr_losses = []
        self.all_tr_intra_losses = []
        self.all_tr_inter_losses = []
        self.all_val_losses = []
        self.all_val_losses_tr_mode = []
        self.all_val_eval_metrics = []  # does not have to be used
        self.epoch = 0
        # self.need_updateGT = False #update p 
        self.log_file = None
        self.deterministic = deterministic

        self.do_semi = do_semi
        self.only_do_semi = config['only_do_semi']
        self.wandb = wandb

        self.use_progress_bar = True
        if 'nnunet_use_progress_bar' in os.environ.keys():
            self.use_progress_bar = bool(
                int(os.environ['nnunet_use_progress_bar']))

        #################################################################

        self.unpack_data = unpack_data
        self.init_args = (plans_file, fold, output_folder_dict, dataset_directory_dict, batch_dice, stage, unpack_data,
                          deterministic, fp16)
        # set through arguments from init
        self.stage = stage
        self.experiment_name = self.__class__.__name__
        self.plans_file = plans_file
        self.output_folder_dict = output_folder_dict
        self.output_folder = output_folder_dict[tasks[0]]
        self.dataset_directory_dict = dataset_directory_dict
        self.output_folder_base = self.output_folder
        self.fold = fold
        self.tasks = tasks
        self.tags = tags

        self.plans = None

        # if we are running inference only then the self.dataset_directory is set (due to checkpoint loading) but it
        # irrelevant
        self.gt_niftis_folder_dict = {}
        for task in tasks:
            dataset_directory = self.dataset_directory_dict[task]
            if dataset_directory is not None and isdir(dataset_directory):
                self.gt_niftis_folder_dict[task] = join(
                    dataset_directory, "gt_segmentations")
            else:
                self.gt_niftis_folder_dict[task] = None
        self.gt_niftis_folder = self.gt_niftis_folder_dict[self.tasks[0]]# 0 gt_nii
      
        self.folder_with_preprocessed_data = None

        # set in self.initialize()

        self.dl_tr = self.dl_val = None
        self.num_input_channels = self.num_classes = self.net_pool_per_axis = self.patch_size = self.batch_size = \
            self.threeD = self.base_num_features = self.intensity_properties = self.normalization_schemes = \
            self.net_num_pool_op_kernel_sizes = self.net_conv_kernel_sizes = None  # loaded automatically from plans_file
        self.basic_generator_patch_size = self.data_aug_params = self.transpose_forward = self.transpose_backward = None

        self.batch_dice = batch_dice
        # self.loss = None

        self.online_eval_foreground_dc = []
        self.online_eval_tp = []
        self.online_eval_fp = []
        self.online_eval_fn = []

        self.classes = self.do_dummy_2D_aug = self.use_mask_for_norm = self.only_keep_largest_connected_component = \
            self.min_region_size_per_class = self.min_size_per_class = None

        self.inference_pad_border_mode = "constant"
        self.inference_pad_kwargs = {'constant_values': 0}

        self.update_fold(fold)
        self.pad_all_sides = None

        self.lr_scheduler_eps = 1e-3
        self.lr_scheduler_patience = 30
        self.weight_decay = 3e-5

        self.oversample_foreground_percent = 0.33

        self.conv_per_stage = None
        self.regions_class_order = None
        
        self.initial_lr = config['initial_lr'] #1e-3 #  5e-3 #   3e-3 #
        self.deep_supervision_scales = None
        self.ds_loss_weights = None
        self.use_amp = config['use_amp']

        self.pin_memory = True
        self.label_rate = config['label_rate']
        semi_config = config['semi_config']
        self.stride = semi_config['stride']
        self.partial_label_guide = semi_config['partial_label_guide']
        self.project_dim = semi_config['project_final_dim']
        self.use_multi_level_feature = semi_config['use_multi_level_feature']
        self.loss = DC_CE_Marginal_Exclusion_loss({'batch_dice': self.batch_dice, 'smooth': 1e-5, 'do_bg': False}, {}, ex=False)
        #self.semi_loss = CAC(num_classes=6,stride=semi_config['stride'], selected_num=semi_config['selected_num'] ,b=semi_config['b'] ,pos_thresh_value=semi_config['pos_thresh_value'], step_save=semi_config['step_save'], proj_final_dim=semi_config['project_final_dim'], weight_intra=semi_config['weight_intra'], weight_inter=semi_config['weight_inter'])
        self.semi_loss1 = CAC(num_classes=6,selected_num=semi_config['selected_num'] ,b=semi_config['b'] ,pos_thresh_value=semi_config['pos_thresh_value'], step_save=semi_config['step_save'], proj_final_dim=semi_config['project_final_dim'], weight_intra=semi_config['weight_intra'], weight_inter=semi_config['weight_inter'])
        self.semi_loss2 = CAC(num_classes=6,selected_num=semi_config['selected_num']+1600 ,b=semi_config['b']+2000 ,pos_thresh_value=semi_config['pos_thresh_value'], step_save=semi_config['step_save'], proj_final_dim=semi_config['project_final_dim'], weight_intra=semi_config['weight_intra'], weight_inter=semi_config['weight_inter'])
        # self.loss = pann_loss({'batch_dice': self.batch_dice, 'smooth': 1e-5, 'do_bg': False}, {})
        # self.loss = DC_and_CE_loss({'batch_dice': self.batch_dice, 'smooth': 1e-5, 'do_bg': False}, {})


    def load_plans_file(self):
        """
        This is what actually configures the entire experiment. The plans file is generated by experiment planning
        :return:
        """
        self.plans = load_pickle(self.plans_file[self.tasks[0]])


    def initialize(self, training=True, force_load_plans=False):
        """
        - replaced get_default_augmentation with get_moreDA_augmentation
        - enforce to only run this code once
        - loss function wrapper for deep supervision

        :param training:
        :param force_load_plans:
        :return:
        """
        if not self.was_initialized:
            maybe_mkdir_p(self.output_folder)

            if force_load_plans or (self.plans is None):
                self.load_plans_file()

            self.process_plans(self.plans)

            self.setup_DA_params()

            ################# Here we wrap the loss for deep supervision ############
            # we need to know the number of outputs of the network
            net_numpool = len(self.net_num_pool_op_kernel_sizes)
            # print("---net_numpool:", net_numpool) #Task_100 MAB 5 class
            # we give each output a weight which decreases exponentially (division by 2) as the resolution decreases
            # this gives higher resolution outputs more weight in the loss
            weights = np.array([1 / (2 ** i) for i in range(net_numpool)])

            # we don't use the lowest 2 outputs. Normalize weights so that they sum to 1
            mask = np.array([True] + [True if i < net_numpool -
                                      1 else False for i in range(1, net_numpool)])
            weights[~mask] = 0
            weights = weights / weights.sum()
            self.ds_loss_weights = weights
            # now wrap the loss
            # self.loss = MultipleOutputLoss2withTags_pann(self.loss, self.ds_loss_weights)
            self.loss = MultipleOutputLoss2withTags(self.loss, self.ds_loss_weights)
            ################# END ###################
            self.folder_with_preprocessed_data = {}
            self.dl_tr = []
            self.dl_tr_semis = [] # dataloader for semi supervised learning
            self.dl_val_semis = [] # dataloader for semi supervised learning
            self.dl_val = []
            self.tr_gens = []
            self.val_gens = []
            for task in self.tasks:
                self.folder_with_preprocessed_data[task] = join(self.dataset_directory_dict[task], self.plans['data_identifier'] +
                                                                "_stage%d" % self.stage)
                if training:
                    dl_tr, dl_val, dl_tr_semi,dl_val_semi = self.get_basic_generators(task)
                    
                    
                    self.dl_tr.append(dl_tr)
                   
                    self.dl_tr_semis.append(dl_tr_semi)
                    self.dl_val_semis.append(dl_val_semi)

                    self.dl_val.append(dl_val)
                    # print('%s.dl_tr raw data size:%d'%(task, len(dl_tr)))
                    if self.unpack_data:
                        print("unpacking dataset")
                        unpack_dataset(
                            self.folder_with_preprocessed_data[task])
                        print("done")
                    else:
                        print(
                            "INFO: Not unpacking data! Training may be slow due to that. Pray you are not using 2d or you "
                            "will wait all winter for your model to finish!")

                    tr_gen, val_gen = get_moreDA_augmentation( # data augmentation
                        dl_tr, dl_val,
                        self.data_aug_params[
                            'patch_size_for_spatialtransform'],
                        self.data_aug_params,
                        deep_supervision_scales=self.deep_supervision_scales,
                        pin_memory=self.pin_memory
                    )
                    

                    self.tr_gens.append(tr_gen) #tr_gen: multithreadaug..
                    self.val_gens.append(val_gen)
                    b = next(iter(tr_gen))
                    print(b['data'].shape)
                    self.print_to_log_file("TRAINING KEYS:\n %s" % (str(self.dataset_tr.keys())),
                                           also_print_to_console=False)
                    print("TRAINING KEYS:\n %s" % (str(self.dataset_tr.keys())))
                    self.print_to_log_file("VALIDATION KEYS:\n %s" % (str(self.dataset_val.keys())),
                                           also_print_to_console=False)
                else:
                    pass
            ################## dataset all in ###########################
           

            if training:
                self.tr_gen = switchable_generator(self.tr_gens)
                self.val_gen = switchable_generator(self.val_gens)
                self.tr_gen_semi = switchable_generator(self.dl_tr_semis)
                self.val_gen_semi = switchable_generator(self.dl_val_semis)

            self.initialize_network()
            self.initialize_optimizer_and_scheduler()

            assert isinstance(
                self.network, (SegmentationNetwork, nn.DataParallel))
        else:
            self.print_to_log_file(
                'self.was_initialized is True, not running self.initialize again')
        self.was_initialized = True

    def initialize_network(self):
        """
        - momentum 0.99
        - SGD instead of Adam
        - self.lr_scheduler = None because we do poly_lr
        - deep supervision = True
        - i am sure I forgot something here

        Known issue: forgot to set neg_slope=0 in InitWeights_He; should not make a difference though
        :return:
        """
        if self.threeD:
            conv_op = nn.Conv3d
            dropout_op = nn.Dropout3d
            norm_op = nn.InstanceNorm3d

        else:
            conv_op = nn.Conv2d
            dropout_op = nn.Dropout2d
            norm_op = nn.InstanceNorm2d

        norm_op_kwargs = {'eps': 1e-5, 'affine': True}
        dropout_op_kwargs = {'p': 0, 'inplace': True}
        net_nonlin = nn.LeakyReLU
        net_nonlin_kwargs = {'negative_slope': 1e-2, 'inplace': True}
        self.network = Generic_UNet(self.num_input_channels, self.base_num_features, self.num_classes,
                                    len(self.net_num_pool_op_kernel_sizes),
                                    self.conv_per_stage, 2, conv_op, norm_op, norm_op_kwargs, dropout_op,
                                    dropout_op_kwargs,
                                    net_nonlin, net_nonlin_kwargs, True, False, lambda x: x, InitWeights_He(
                                        1e-2),
                                    self.net_num_pool_op_kernel_sizes, 
                                    self.net_conv_kernel_sizes, False, True, 
                                    True, project_dim=self.project_dim, 
                                    use_multi_level_feature=self.use_multi_level_feature)
        # different backbone:
        # self.network = generate_resnet3d(in_channels=self.num_input_channels,
        #                                  classes=self.num_classes)
        if torch.cuda.is_available():
            self.network.cuda()
        self.network.inference_apply_nonlin = softmax_helper

    def initialize_optimizer_and_scheduler(self):
        assert self.network is not None, "self.initialize_network must be called first"
        self.optimizer = torch.optim.SGD(self.network.parameters(), self.initial_lr, weight_decay=self.weight_decay,
                                         momentum=0.99, nesterov=True)
        self.lr_scheduler = None

    def get_basic_generators(self, task):
        self.load_dataset(task)
        self.do_split(task)

        if self.label_rate<1.0 and "Task100" not in task:
            self.dataset_tr_extreme = OrderedDict()
            for i,key in enumerate(self.dataset_tr.keys()):
                self.dataset_tr_extreme[key] = self.dataset_tr[key]
                if i>len(self.dataset_tr) * self.label_rate:
                    break
        if self.threeD:
            if self.label_rate<1.0 and "Task100" not in task:
                dl_tr = DataLoader3D(self.dataset_tr_extreme, self.basic_generator_patch_size, self.patch_size, self.batch_size,self.tags[task],
                        False, oversample_foreground_percent=self.oversample_foreground_percent,
                        pad_mode="constant", pad_sides=self.pad_all_sides)
            else:
                dl_tr = DataLoader3D(self.dataset_tr, self.basic_generator_patch_size, self.patch_size, self.batch_size,self.tags[task],
                                    False, oversample_foreground_percent=self.oversample_foreground_percent,
                                    pad_mode="constant", pad_sides=self.pad_all_sides)
            dl_val = DataLoader3D(self.dataset_val, self.patch_size, self.patch_size, self.batch_size,self.tags[task], False,
                                  oversample_foreground_percent=self.oversample_foreground_percent,
                                  pad_mode="constant", pad_sides=self.pad_all_sides)
            #dataloader for semi supervised learning
            dl_tr_semi = DataLoader3DSemi(self.dataset_tr, self.patch_size, 2,self.tags[task],
                                 False, oversample_foreground_percent=self.oversample_foreground_percent,
                                 pad_mode="constant", pad_sides=self.pad_all_sides, stride=self.stride)
            # for validation semi segmentation
            dl_val_semi = DataLoader3DSemi(self.dataset_val, self.patch_size, 2,self.tags[task],
                            False, oversample_foreground_percent=self.oversample_foreground_percent,
                            pad_mode="constant", pad_sides=self.pad_all_sides, stride=self.stride)
        
        else:
            dl_tr = DataLoader2D(self.dataset_tr, self.basic_generator_patch_size, self.patch_size, self.batch_size,self.tags[task],
                                 # self.plans.get('transpose_forward'),
                                 transpose=None,
                                 oversample_foreground_percent=self.oversample_foreground_percent,
                                 pad_mode="constant", pad_sides=self.pad_all_sides)
            dl_val = DataLoader2D(self.dataset_val, self.patch_size, self.patch_size, self.batch_size,self.tags[task],
                                  # self.plans.get('transpose_forward'),
                                  transpose=None,
                                  oversample_foreground_percent=self.oversample_foreground_percent,
                                  pad_mode="constant", pad_sides=self.pad_all_sides)
        return dl_tr, dl_val, dl_tr_semi, dl_val_semi

    def load_dataset(self, task=None):
        if task is None:
            self.dataset = load_dataset(self.folder_with_preprocessed_data[self.tasks[0]])
        else:
            self.dataset = load_dataset(self.folder_with_preprocessed_data[task])

    def run_online_evaluation(self, output, target):
        """
        due to deep supervision the return value and the reference are now lists of tensors. We only need the full
        resolution output because this is what we are interested in in the end. The others are ignored
        :param output:
        :param target:
        :return:
        """
        target = target[0]
        output = output[0]
        #conver target if use the partially leabeled data
        # class_num = len(self.y_tags) # add filter for class_num=5
        # filter = (output!=0)
        # if class_num < 5:
        #     for tag in self.y_tags[::-1]:
        #         target[target==class_num] = self.x_tags.index(tag)+1
        #         filter &= (output != self.x_tags.index(tag)+1)
        #         class_num-=1
        #     output[filter] = 0

        return super().run_online_evaluation(output, target)

    def validate(self, do_mirroring: bool = True, use_sliding_window: bool = True,
                 step_size: float = 0.5, save_softmax: bool = True, use_gaussian: bool = True, overwrite: bool = True,
                 validation_folder_name: str = 'validation_raw', debug: bool = False, all_in_gpu: bool = False,
                 force_separate_z: bool = None, interpolation_order: int = 3, interpolation_order_z=0):
        """
        We need to wrap this because we need to enforce self.network.do_ds = False for prediction
        """
        ds = self.network.do_ds
        self.network.do_ds = False
        ret = super().validate(do_mirroring, use_sliding_window, step_size, save_softmax, use_gaussian,
                               overwrite, validation_folder_name, debug, all_in_gpu,
                               force_separate_z=force_separate_z, interpolation_order=interpolation_order,
                               interpolation_order_z=interpolation_order_z)
        self.network.do_ds = ds
        return ret

    def validate_specific_data(self,task, do_mirroring: bool = True, use_sliding_window: bool = True,
                 step_size: float = 0.5, save_softmax: bool = True, use_gaussian: bool = True, overwrite: bool = False,
                 validation_folder_name: str = 'validation_raw', debug: bool = False, all_in_gpu: bool = False,
                 force_separate_z: bool = None, interpolation_order: int = 3, interpolation_order_z=0):
        ds = self.network.do_ds #?
        self.network.do_ds = False
        ###########################################
        current_mode = self.network.training
        self.network.eval()

        assert self.was_initialized, "must initialize, ideally with checkpoint (or train first)"

        self.load_dataset(task)
        self.do_split(task)

        # predictions as they come from the network go here
        self.output_folder = self.output_folder_dict[task]
        self.gt_niftis_folder = self.gt_niftis_folder_dict[task]
        output_folder = join(self.output_folder,'fold_4', validation_folder_name)
        maybe_mkdir_p(output_folder)
        # this is for debug purposes
        my_input_args = {'do_mirroring': do_mirroring,
                         'use_sliding_window': use_sliding_window,
                         'step_size': step_size,
                         'save_softmax': save_softmax,
                         'use_gaussian': use_gaussian,
                         'overwrite': overwrite,
                         'validation_folder_name': validation_folder_name,
                         'debug': debug,
                         'all_in_gpu': all_in_gpu, #? why not use
                         'force_separate_z': force_separate_z,
                         'interpolation_order': interpolation_order,
                         'interpolation_order_z': interpolation_order_z,
                         }
        save_json(my_input_args, join(output_folder, "validation_args.json"))

        if do_mirroring:
            if not self.data_aug_params['do_mirror']:
                raise RuntimeError("We did not train with mirroring so you cannot do inference with mirroring enabled")
            mirror_axes = self.data_aug_params['mirror_axes']
        else:
            mirror_axes = ()

        pred_gt_tuples = []

        export_pool = Pool(default_num_threads)
        results = []
        if '104' in task:#kidney
            temp_transpose = [0, 2, 3, 1]
        else:
            temp_transpose = [0, 1, 2, 3]
        for k in self.dataset_val.keys():
            properties = self.dataset[k]['properties']
            fname = properties['list_of_data_files'][0].split("/")[-1][:-12]
            if overwrite or (not isfile(join(output_folder, fname + ".nii.gz"))) or \
                    (save_softmax and not isfile(join(output_folder, fname + ".npz"))):
                data = np.load(self.dataset[k]['data_file'])['data']

                print(k, data.shape)
                data[-1][data[-1] == -1] = 0

                softmax_pred = self.predict_preprocessed_data_return_seg_and_softmax(
                    data[:-1], do_mirroring, mirror_axes, use_sliding_window, step_size, use_gaussian, all_in_gpu=all_in_gpu
                )[1]
                
                softmax_pred = softmax_pred.transpose(temp_transpose)
                # softmax_pred = softmax_pred.transpose([0] + [i + 1 for i in self.transpose_backward])

                if save_softmax:
                    softmax_fname = join(output_folder, fname + ".npz")
                else:
                    softmax_fname = None

                """There is a problem with python process communication that prevents us from communicating obejcts
                larger than 2 GB between processes (basically when the length of the pickle string that will be sent is
                communicated by the multiprocessing.Pipe object then the placeholder (\%i I think) does not allow for long
                enough strings (lol). This could be fixed by changing i to l (for long) but that would require manually
                patching system python code. We circumvent that problem here by saving softmax_pred to a npy file that will
                then be read (and finally deleted) by the Process. save_segmentation_nifti_from_softmax can take either
                filename or np.ndarray and will handle this automatically"""
                if np.prod(softmax_pred.shape) > (2e9 / 4 * 0.85):  # *0.85 just to be save
                    np.save(join(output_folder, fname + ".npy"), softmax_pred)
                    softmax_pred = join(output_folder, fname + ".npy")
               
                # save_segmentation_nifti_from_softmax(softmax_pred, join(output_folder, fname + ".nii.gz"),
                #                                             properties, interpolation_order, None, None, None,
                #                                             softmax_fname, None, force_separate_z,
                #                                             interpolation_order_z, task)
         
                results.append(export_pool.starmap_async(save_segmentation_nifti_from_softmax,
                                                            ((softmax_pred, join(output_folder, fname + ".nii.gz"),
                                                            properties, interpolation_order, None, None, None,
                                                            softmax_fname, None, force_separate_z,
                                                            interpolation_order_z,task),
                                                            )
                                                            )
                                )

            pred_gt_tuples.append([join(output_folder, fname + ".nii.gz"),
                                    join(self.gt_niftis_folder, fname + ".nii.gz")])

        _ = [i.get() for i in results]
        self.print_to_log_file("finished prediction")

        # evaluate raw predictions
        self.print_to_log_file("evaluation of raw predictions")
        # task = self.dataset_directory.split("/")[-1]
        job_name = self.experiment_name
        # x_tags = ['rightkidney','leftkidney']
        x_tags = ['spleen','rightkidney','leftkidney','liver','pancreas']
        if "100" in task:
            y_tags = x_tags
        elif "101" in task or "105" in task:
            y_tags = ['liver']
        elif "102" in task or "200" in task:
            y_tags = ['spleen']
        elif "103" in task or "203" in task:
            y_tags = ['pancreas']
        elif "104" in task:
            y_tags = ['rightkidney','leftkidney']
        elif "105" in task:#PrivateLiver
            y_tags = ['liver']
        else:
            exit()
        all_score = aggregate_scores_withtags(pred_gt_tuples, labels=list(range(self.num_classes)),x_tags=x_tags,y_tags=y_tags,
                             json_output_file=join(output_folder, "summary.json"),
                             json_name=job_name + " val tiled %s" % (str(use_sliding_window)),
                             json_author="Fabian",
                             json_task=task, num_threads=default_num_threads)

        # in the old nnunet we would stop here. Now we add a postprocessing. This postprocessing can remove everything
        # except the largest connected component for each class. To see if this improves results, we do this for all
        # classes and then rerun the evaluation. Those classes for which this resulted in an improved dice score will
        # have this applied during inference as well

        # after this the final predictions for the vlaidation set can be found in validation_folder_name_base + "_postprocessed"
        # They are always in that folder, even if no postprocessing as applied!

        # detemining postprocesing on a per-fold basis may be OK for this fold but what if another fold finds another
        # postprocesing to be better? In this case we need to consolidate. At the time the consolidation is going to be
        # done we won't know what self.gt_niftis_folder was, so now we copy all the niftis into a separate folder to
        # be used later
        self.output_folder_base = self.output_folder
        gt_nifti_folder = join(self.output_folder_base, "gt_niftis")
        maybe_mkdir_p(gt_nifti_folder)
        for f in subfiles(self.gt_niftis_folder, suffix=".nii.gz"):
            success = False
            attempts = 0
            e = None
            while not success and attempts < 10:
                try:
                    shutil.copy(f, gt_nifti_folder)
                    success = True
                except OSError as e:
                    attempts += 1
                    sleep(1)
            if not success:
                print("Could not copy gt nifti file %s into folder %s" % (f, gt_nifti_folder))
                if e is not None:
                    raise e

        self.network.train(current_mode)
        ###########################################
        self.network.do_ds = ds
        # return ret
        

    def predict_preprocessed_data_return_seg_and_softmax(self, data: np.ndarray, do_mirroring: bool = True,
                                                         mirror_axes: Tuple[int] = None,
                                                         use_sliding_window: bool = True,
                                                         step_size: float = 0.5, use_gaussian: bool = True,
                                                         pad_border_mode: str = 'constant', pad_kwargs: dict = None,
                                                         all_in_gpu: bool = True,
                                                         verbose: bool = True) -> Tuple[np.ndarray, np.ndarray]:
        """
        We need to wrap this because we need to enforce self.network.do_ds = False for prediction
        """
        ds = self.network.do_ds
        self.network.do_ds = False
        ret = super().predict_preprocessed_data_return_seg_and_softmax(data, do_mirroring, mirror_axes,
                                                                       use_sliding_window, step_size, use_gaussian,
                                                                       pad_border_mode, pad_kwargs, all_in_gpu, verbose)
        self.network.do_ds = ds
        return ret

    def run_iteration(self, data_generator,do_backprop=True, run_online_evaluation=False,data_generator_semi=None,do_semi=False, only_do_semi=False, task_id=100):
        """
        gradient clipping improves training stability

        :param data_generator:
        :param do_backprop:
        :param run_online_evaluation:
        :return:
        """

        sup_loss = torch.FloatTensor([0]).cuda()
        if not only_do_semi:
            data_dict = next(data_generator)
            # length = get_length(data_generator)
            data = data_dict['data']
            target = data_dict['target']

        
            # self.x_tags = ['liver','spleen','pancreas','rightkidney','leftkidney'] #test-mk
            if self.x_tags is None:
                self.x_tags = [tag.lower() for tag in data_dict['tags']]
            y_tags = [tag.lower() for tag in data_dict['tags']]
            self.y_tags = y_tags
            # print("------------------x_tags:",self.x_tags)
            # print("------------------y_tags:",y_tags)
            data = maybe_to_torch(data)
            target = maybe_to_torch(target)



            if torch.cuda.is_available():
                data = to_cuda(data)
                target = to_cuda(target)

            self.optimizer.zero_grad()

            output = self.network(data)
            #print("num class:",output[0].shape)
            sup_loss = self.loss(output[:-2], target,self.x_tags,y_tags)
            
            del data
        # loss = self.loss(output, target,self.x_tags,y_tags,need_updateGT=need_updateGT)
        #loss = sup_loss
        semi_loss_intra_level1 = torch.FloatTensor([0]).cuda()
        semi_loss_inter_level1 = torch.FloatTensor([0]).cuda()
        semi_loss_intra_level2 = torch.FloatTensor([0]).cuda()
        semi_loss_inter_level2 = torch.FloatTensor([0]).cuda()
                # prepare unsupervised data
        #semi_loss_func = CAC(num_classes=6,pos_thresh_value=0.3)
        if data_generator_semi != None and do_semi:
                #semi supervised learning
            data_dict_semi = next(data_generator_semi)
            # length = get_length(data_generator)
            data_semi = data_dict_semi['data']
            target_semi = data_dict_semi['seg']
            data_semi1 = data_semi[:,:-1,:,:,:]
            data_semi2 = data_semi[:,-1:,:,:,:]
            data_semi1 = maybe_to_torch(data_semi1)
            data_semi2 = maybe_to_torch(data_semi2)
            target_semi1 = target_semi[:,:-1,:,:,:]
            target_semi2 = target_semi[:,-1:,:,:,:]
            target_semi1 = maybe_to_torch(target_semi1)
            target_semi2 = maybe_to_torch(target_semi2)
            if torch.cuda.is_available():
                data_semi1 = to_cuda(data_semi1)
                data_semi2 = to_cuda(data_semi2)
                target_semi1 = to_cuda(target_semi1)
                target_semi2 = to_cuda(target_semi2)
            output_semi1 = self.network(data_semi1)
            output_semi2 = self.network(data_semi2)
            pred1_0_level1 = F.interpolate(output_semi1[0], size=output_semi1[-1].size()[2:], mode='trilinear', align_corners=True)
            pred2_0_level1 = F.interpolate(output_semi2[0], size=output_semi2[-1].size()[2:], mode='trilinear', align_corners=True)
            pred1_1_level1 = F.interpolate(output_semi1[1], size=output_semi1[-1].size()[2:], mode='trilinear', align_corners=True)
            pred2_1_level1 = F.interpolate(output_semi2[1], size=output_semi2[-1].size()[2:], mode='trilinear', align_corners=True)
            pred1_2_level1 = F.interpolate(output_semi1[2], size=output_semi1[-1].size()[2:], mode='trilinear', align_corners=True)
            pred2_2_level1 = F.interpolate(output_semi2[2], size=output_semi2[-1].size()[2:], mode='trilinear', align_corners=True)
            pred1_3_level1 = F.interpolate(output_semi1[3], size=output_semi1[-1].size()[2:], mode='trilinear', align_corners=True)
            pred2_3_level1 = F.interpolate(output_semi2[3], size=output_semi2[-1].size()[2:], mode='trilinear', align_corners=True)
            pred1_0_level2 = F.interpolate(output_semi1[0], size=output_semi1[-2].size()[2:], mode='trilinear', align_corners=True)
            pred2_0_level2 = F.interpolate(output_semi2[0], size=output_semi2[-2].size()[2:], mode='trilinear', align_corners=True)
            pred1_1_level2 = F.interpolate(output_semi1[1], size=output_semi1[-2].size()[2:], mode='trilinear', align_corners=True)
            pred2_1_level2 = F.interpolate(output_semi2[1], size=output_semi2[-2].size()[2:], mode='trilinear', align_corners=True)
            pred1_2_level2 = F.interpolate(output_semi1[2], size=output_semi1[-2].size()[2:], mode='trilinear', align_corners=True)
            pred2_2_level2 = F.interpolate(output_semi2[2], size=output_semi2[-2].size()[2:], mode='trilinear', align_corners=True)
            pred1_3_level2 = F.interpolate(output_semi1[3], size=output_semi1[-2].size()[2:], mode='trilinear', align_corners=True)
            pred2_3_level2 = F.interpolate(output_semi2[3], size=output_semi2[-2].size()[2:], mode='trilinear', align_corners=True)
            pred1_level1 = self.ds_loss_weights[0]*pred1_0_level1 + self.ds_loss_weights[1]*pred1_1_level1 + self.ds_loss_weights[2]*pred1_2_level1 + self.ds_loss_weights[3]*pred1_3_level1 
            pred2_level1 = self.ds_loss_weights[0]*pred2_0_level1 + self.ds_loss_weights[1]*pred2_1_level1 + self.ds_loss_weights[2]*pred2_2_level1 + self.ds_loss_weights[3]*pred2_3_level1 
            pred1_level2 = self.ds_loss_weights[0]*pred1_0_level2 + self.ds_loss_weights[1]*pred1_1_level2 + self.ds_loss_weights[2]*pred1_2_level2 + self.ds_loss_weights[3]*pred1_3_level2 
            pred2_level2 = self.ds_loss_weights[0]*pred2_0_level2 + self.ds_loss_weights[1]*pred2_1_level2 + self.ds_loss_weights[2]*pred2_2_level2 + self.ds_loss_weights[3]*pred2_3_level2 
            semi_loss_intra_level1, semi_loss_inter_level1 = self.semi_loss1(output_ul1=output_semi1[-1], output_ul2=output_semi2[-1], \
                                        logits1=pred1_level1,logits2=pred2_level1, \
                                        target1=target_semi1, target2=target_semi2,
                                        ul1=data_dict_semi['ul1'], br1=data_dict_semi['br1'],
                                        ul2=data_dict_semi['ul2'], br2=data_dict_semi['br2'],tasks=data_dict_semi['tags'],
                                        partial_label_guide=self.partial_label_guide
                                        )
            # if self.use_multi_level_feature:
            #     semi_loss_intra_level2, semi_loss_inter_level2 = self.semi_loss2(output_ul1=output_semi1[-2], output_ul2=output_semi2[-2], \
            #                                 logits1=pred1_level2,logits2=pred2_level2, \
            #                                 target1=target_semi1, target2=target_semi2,
            #                                 ul1=data_dict_semi['ul1'], br1=data_dict_semi['br1'],
            #                                 ul2=data_dict_semi['ul2'], br2=data_dict_semi['br2'],tasks=data_dict_semi['tags'],
            #                                 partial_label_guide=self.partial_label_guide
            #                                 )
            del data_semi
        #loss = sup_loss + semi_loss_intra + semi_loss_inter
        loss = sup_loss + semi_loss_intra_level1 + semi_loss_inter_level1+ semi_loss_intra_level2 + semi_loss_inter_level2
        #loss = sup_loss + semi_loss
        
        
        if run_online_evaluation:
            self.run_online_evaluation(output, target)
        #del target

        if do_backprop:
            if not self.fp16 or amp is None or not torch.cuda.is_available() or not self.use_amp:
                loss.backward()
            else:
                #loss.backward() # for debug apex
                with amp.scale_loss(loss, self.optimizer) as scaled_loss:
                    scaled_loss.backward()
            _ = clip_grad_norm_(self.network.parameters(), 12)
            self.optimizer.step()

        return loss.detach().cpu().numpy(),semi_loss_intra_level1.detach().cpu().numpy(),semi_loss_intra_level2.detach().cpu().numpy()


    def run_feature(self, iter_num=50):
        """
        get semi supervised embedding features

        :param data_generator:
        :param do_backprop:
        :param run_online_evaluation:
        :return:
        """
        for iter in range(iter_num):
            for task in range(5):
                self.val_gen_semi.setPart(task)
                epoch = 713
                model_path = "model_ep_{}.model".format(epoch)
                self.output_folder = '/data/liupeng/semi-supervised_segmentation/nnUNetFrame/DATASET/nnUNet_trained_models/CAC/3d_fullres/Task100_AbdominalMultiOrganSegmentation/nnUNetMultiTrainerV2__nnUNetPlansv2.1_CAC_stage3_partial_guide/fold_0' # 需要根据任务名称改变
                #self.output_folder = "exp" # 需要根据任务名称改变
                self.load_specific_checkpoint(train=False,model_name=model_path)
                data_dict_semi = next(self.val_gen_semi)
                # length = get_length(data_generator)
                data_semi = data_dict_semi['data']
                target_semi = data_dict_semi['seg']
                img_name1 = data_dict_semi['properties'][0]['list_of_data_files'][0].split("/")[-1]
                img_name2 = data_dict_semi['properties'][1]['list_of_data_files'][0].split("/")[-1]
                img_name_list = [img_name1,img_name2]
                data_semi1 = data_semi[:,:-1,:,:,:]
                data_semi2 = data_semi[:,-1:,:,:,:]
                data_semi1 = maybe_to_torch(data_semi1)
                data_semi2 = maybe_to_torch(data_semi2)
                target_semi1 = target_semi[:,:-1,:,:,:]
                target_semi2 = target_semi[:,-1:,:,:,:]
                target_semi1 = maybe_to_torch(target_semi1)
                target_semi2 = maybe_to_torch(target_semi2)
                if torch.cuda.is_available():
                    data_semi1 = to_cuda(data_semi1)
                    data_semi2 = to_cuda(data_semi2)
                    target_semi1 = to_cuda(target_semi1)
                    target_semi2 = to_cuda(target_semi2)
                output_semi1 = self.network(data_semi1)
                output_semi2 = self.network(data_semi2)
                self.save_embedding_feature(output_ul1=output_semi1[-1], output_ul2=output_semi2[-1],
                                            target1=target_semi1, target2=target_semi2,
                                            ul1=data_dict_semi['ul1'], br1=data_dict_semi['br1'],
                                            ul2=data_dict_semi['ul2'], br2=data_dict_semi['br2'],
                                            img_name_list=img_name_list
                                            )
                # without CAC model
                epoch = 600
                model_path = "model_ep_{}.model".format(epoch)
                self.output_folder = '/data/liupeng/semi-supervised_segmentation/nnUNetFrame/DATASET/nnUNet_trained_models/CAC/3d_fullres/Task100_AbdominalMultiOrganSegmentation/nnUNetMultiTrainerV2__nnUNetPlansv2.1_kevin/fold_0' # 需要根据任务名称改变
                self.load_specific_checkpoint(train=False,model_name=model_path)

                output_semi1 = self.network(data_semi1)
                output_semi2 = self.network(data_semi2)
                self.save_embedding_feature(output_ul1=output_semi1[-1], output_ul2=output_semi2[-1],
                                            target1=target_semi1, target2=target_semi2,
                                            ul1=data_dict_semi['ul1'], br1=data_dict_semi['br1'],
                                            ul2=data_dict_semi['ul2'], br2=data_dict_semi['br2'],
                                            img_name_list=img_name_list,with_CAC="withoutCAC"
                                            )


    def save_embedding_feature(self,output_ul1=None, output_ul2=None,target1=None, target2=None, ul1=None, br1=None, \
                ul2=None, br2=None, img_name_list=None, with_CAC="withCAC"):        
        target1 = F.interpolate(target1, size=output_ul1.size()[2:], mode='nearest')
        target2 = F.interpolate(target2, size=output_ul2.size()[2:], mode='nearest')


        # # get overlap part
        output_feature_list1 = []
        output_feature_list2 = []
        target_label_list1 = []
        target_label_list2 = []

        #TODO need to get target label overlap
        for idx in range(target1.size(0)):
            output_ul1_idx = output_ul1[idx]
            output_ul2_idx = output_ul2[idx]
            target_label1_idx = target1[idx]
            target_label2_idx = target2[idx]
            output_feature_list1.append(output_ul1_idx[:, ul1[idx][0]//self.stride:br1[idx][0]//self.stride, ul1[idx][1]//self.stride:br1[idx][1]//self.stride, ul1[idx][2]//self.stride:br1[idx][2]//self.stride].permute(1, 2, 3, 0).contiguous().view(-1, output_ul1.size(1)))
            output_feature_list2.append(output_ul2_idx[:, ul2[idx][0]//self.stride:br2[idx][0]//self.stride, ul2[idx][1]//self.stride:br2[idx][1]//self.stride, ul2[idx][2]//self.stride:br2[idx][2]//self.stride].permute(1, 2, 3, 0).contiguous().view(-1, output_ul2.size(1)))
            target_label_list1.append(target_label1_idx[:,ul1[idx][0]//self.stride:br1[idx][0]//self.stride, ul1[idx][1]//self.stride:br1[idx][1]//self.stride, ul1[idx][2]//self.stride:br1[idx][2]//self.stride].contiguous().view(-1))
            target_label_list2.append(target_label2_idx[:,ul2[idx][0]//self.stride:br2[idx][0]//self.stride, ul2[idx][1]//self.stride:br2[idx][1]//self.stride, ul2[idx][2]//self.stride:br2[idx][2]//self.stride].contiguous().view(-1))# print("output feature list shape:", output_feature_list1[0].shape)
            # print("pseudo label list shape:", pseudo_label_list2[0].shape)
        for i in range(0,len(output_feature_list1)):
            if (target_label_list1[i]!=0).sum()<400:
                continue
            fname = "./embedding_features/{}_labelnum{}_{}.pkl".format(img_name_list[i].replace(".nii.gz",""),(target_label_list1[i]!=0).sum(),with_CAC)
            print('===> Saving feats to ' + fname)
            with open(fname, 'wb') as f:
                pickle.dump({
                                'feats_1': output_feature_list1[i].detach().cpu().numpy(),
                                'feats_2': output_feature_list2[i].detach().cpu().numpy(),
                                'labels_1': target_label_list1[i].detach().cpu().numpy(),
                                'labels_2': target_label_list2[i].detach().cpu().numpy(),
                                'ul1':np.array(ul1),
                                'ul2':np.array(ul2),
                                'br1':np.array(br1),
                                'br2':np.array(br2)
                            },
                            f, protocol=4)
            print('===> Saving feats done ')


    def do_split(self,task=None):
        """
        we now allow more than 5 splits. IMPORTANT: and fold > 4 will not be a real split but just another random
        80:20 split of the data. You cannot run X-fold cross-validation with this code. It will always be a 5-fold CV.
        Folds > 4 will be independent from each other
        :return:
        """
        if task is None:
            task = self.tasks[0]
        if self.fold == 'all' or self.fold < 5:#fold = 4
           self.dataset_directory = self.dataset_directory_dict[task]
            
           return super().do_split()
        else:
            print("---------------!!!!!!!!--------------")
            rnd = np.random.RandomState(seed=12345 + self.fold)
            keys = np.sort(list(self.dataset.keys()))
            idx_tr = rnd.choice(len(keys), int(len(keys) * 0.8), replace=False)
            idx_val = [i for i in range(len(keys)) if i not in idx_tr]

            self.dataset_tr = OrderedDict()
            for i in idx_tr:
                self.dataset_tr[keys[i]] = self.dataset[keys[i]]
            
            self.dataset_val = OrderedDict()
            for i in idx_val:
                self.dataset_val[keys[i]] = self.dataset[keys[i]]

    def setup_DA_params(self):
        """
        - we increase roation angle from [-15, 15] to [-30, 30]
        - scale range is now (0.7, 1.4), was (0.85, 1.25)
        - we don't do elastic deformation anymore

        :return:
        """

        self.deep_supervision_scales = [[1, 1, 1]] + list(list(i) for i in 1 / np.cumprod(
            np.vstack(self.net_num_pool_op_kernel_sizes), axis=0))[:-1]

        if self.threeD:
            self.data_aug_params = default_3D_augmentation_params
            self.data_aug_params['rotation_x'] = (
                -30. / 360 * 2. * np.pi, 30. / 360 * 2. * np.pi)
            self.data_aug_params['rotation_y'] = (
                -30. / 360 * 2. * np.pi, 30. / 360 * 2. * np.pi)
            self.data_aug_params['rotation_z'] = (
                -30. / 360 * 2. * np.pi, 30. / 360 * 2. * np.pi)
            if self.do_dummy_2D_aug:
                self.data_aug_params["dummy_2D"] = True
                self.print_to_log_file("Using dummy2d data augmentation")
                self.data_aug_params["elastic_deform_alpha"] = \
                    default_2D_augmentation_params["elastic_deform_alpha"]
                self.data_aug_params["elastic_deform_sigma"] = \
                    default_2D_augmentation_params["elastic_deform_sigma"]
                self.data_aug_params["rotation_x"] = default_2D_augmentation_params["rotation_x"]
        else:
            self.do_dummy_2D_aug = False
            if max(self.patch_size) / min(self.patch_size) > 1.5:
                default_2D_augmentation_params['rotation_x'] = (
                    -15. / 360 * 2. * np.pi, 15. / 360 * 2. * np.pi)
            self.data_aug_params = default_2D_augmentation_params
        self.data_aug_params["mask_was_used_for_normalization"] = self.use_mask_for_norm

        if self.do_dummy_2D_aug:
            self.basic_generator_patch_size = get_patch_size(self.patch_size[1:],
                                                             self.data_aug_params['rotation_x'],
                                                             self.data_aug_params['rotation_y'],
                                                             self.data_aug_params['rotation_z'],
                                                             self.data_aug_params['scale_range'])
            self.basic_generator_patch_size = np.array(
                [self.patch_size[0]] + list(self.basic_generator_patch_size))
            patch_size_for_spatialtransform = self.patch_size[1:]
        else:
            self.basic_generator_patch_size = get_patch_size(self.patch_size, self.data_aug_params['rotation_x'],
                                                             self.data_aug_params['rotation_y'],
                                                             self.data_aug_params['rotation_z'],
                                                             self.data_aug_params['scale_range'])
            patch_size_for_spatialtransform = self.patch_size

        self.data_aug_params["scale_range"] = (0.7, 1.4)
        self.data_aug_params["do_elastic"] = False
        self.data_aug_params['selected_seg_channels'] = [0]
        self.data_aug_params['patch_size_for_spatialtransform'] = patch_size_for_spatialtransform

        self.data_aug_params["num_cached_per_thread"] = 2

    def maybe_update_lr(self, epoch=None):
        """
        if epoch is not None we overwrite epoch. Else we use epoch = self.epoch + 1

        (maybe_update_lr is called in on_epoch_end which is called before epoch is incremented.
        herefore we need to do +1 here)

        :param epoch:
        :return:
        """
        if epoch is None:
            ep = self.epoch + 1
        else:
            ep = epoch
        self.optimizer.param_groups[0]['lr'] = poly_lr(
            ep, self.max_num_epochs, self.initial_lr, 0.9)
        self.print_to_log_file("lr:", np.round(
            self.optimizer.param_groups[0]['lr'], decimals=6))
            
    def on_epoch_end(self):
        """
        overwrite patient-based early stopping. Always run to 1000 epochs
        :return:
        """
        super().on_epoch_end()
        continue_training = self.epoch < self.max_num_epochs

        # it can rarely happen that the momentum of nnUNetTrainerV2 is too high for some dataset. If at epoch 100 the
        # estimated validation Dice is still 0 then we reduce the momentum from 0.99 to 0.95
        if self.epoch == 100:
            if self.all_val_eval_metrics[-1] == 0:
                self.optimizer.param_groups[0]["momentum"] = 0.95
                self.network.apply(InitWeights_He(1e-2))
                self.print_to_log_file("At epoch 100, the mean foreground Dice was 0. This can be caused by a too "
                                       "high momentum. High momentum (0.99) is good for datasets where it works, but "
                                       "sometimes causes issues such as this one. Momentum has now been reduced to "
                                       "0.95 and network weights have been reinitialized")
        return continue_training

    def run_training(self):
        """
        if we run with -c then we need to set the correct lr for the first epoch, otherwise it will run the first
        continued epoch with self.initial_lr

        we also need to make sure deep supervision in the network is enabled for training, thus the wrapper
        :return:
        """
        self.maybe_update_lr(
            self.epoch)  # if we dont overwrite epoch then self.epoch+1 is used which is not what we
        # want at the start of the training
        ds = self.network.do_ds
        self.network.do_ds = True
        # ret = super().run_training()
        ########################################################################################
        
        dct = OrderedDict()
        for k in self.__dir__():
            if not k.startswith("__"):
                if not callable(getattr(self, k)):
                    dct[k] = str(getattr(self, k))
        del dct['plans']
        del dct['intensity_properties']
        del dct['dataset']
        del dct['dataset_tr']
        del dct['dataset_val']
        save_json(dct, join(self.output_folder, "debug.json"))

        import shutil

        shutil.copy(self.plans_file[self.tasks[0]], join(self.output_folder_base, "plans.pkl"))
        
        for i in range(len(self.tasks)):
            self.tr_gen.setPart(i)
            self.tr_gen_semi.setPart(i)
            _ = self.tr_gen.next()
            _ = self.tr_gen_semi.next()
            _ = self.val_gen.next()
        self.tr_gen.setPart(0)
        self.tr_gen_semi.setPart(0)

        if torch.cuda.is_available():
            torch.cuda.empty_cache()

        # self._maybe_init_amp()

        #self.plot_network_architecture()

        if cudnn.benchmark and cudnn.deterministic:
            warn("torch.backends.cudnn.deterministic is True indicating a deterministic training is desired. "
                 "But torch.backends.cudnn.benchmark is True as well and this will prevent deterministic training! "
                 "If you want deterministic then set benchmark=False")

        maybe_mkdir_p(self.output_folder)

        if not self.was_initialized:
            self.initialize(True)

        flag = True
        print("*"*20,"began training","*"*20)
        if self.use_amp:
            self.network, self.optimizer = amp.initialize(self.network, self.optimizer, opt_level="O1") # 这里是“欧一”，不是“零一”
        while self.epoch < self.max_num_epochs:
            # self.need_updateGT=True
            self.print_to_log_file("\nepoch: ", self.epoch)
            epoch_start_time = time()
            train_losses_epoch = []
            train_losses_epoch_semi_intra = []
            train_losses_epoch_semi_inter = []

            # train one epoch

            self.network.train()
            if self.epoch>=self.stage_2_start_epoch and flag:
                self.num_batches_per_epoch = 50 # original 50
                flag = False
            if self.use_progress_bar:
                with trange(self.num_batches_per_epoch) as tbar:
                    for b in tbar:
                        tbar.set_description("Epoch {}/{}".format(self.epoch+1, self.max_num_epochs))

                        # if self.epoch < self.stage_2_start_epoch:
                        l, _, _ = self.run_iteration(self.tr_gen, do_backprop=True)
                        # else:
                        #     l, _, _ = self.run_iteration(self.tr_gen, do_backprop=True,data_generator_semi=self.tr_gen_semi, do_semi=self.do_semi)
                        tbar.set_postfix(loss=l)
                        train_losses_epoch.append(l)
                        if self.epoch>=self.stage_2_start_epoch:
                            for i in range(1,len(self.tasks)):
                                #print("task:",i)
                                if i>4 and self.epoch < self.stage_3_start_epoch:
                                    break  # when began semi supervised learning to use the testing data
                                if i>4:    
                                    self.only_do_semi = True  # use the testing data without label info
                                else:
                                    self.only_do_semi = False
                                self.tr_gen.setPart(i)
                                if self.epoch < self.stage_3_start_epoch:
                                    l, semi_loss_intra, semi_loss_inter = self.run_iteration(self.tr_gen,do_backprop=True,data_generator_semi=self.tr_gen_semi, only_do_semi = self.only_do_semi, do_semi=False, task_id=100+i)
                                else:
                                    self.tr_gen_semi.setPart(i)
                                    l, semi_loss_intra, semi_loss_inter = self.run_iteration(self.tr_gen,do_backprop=True,data_generator_semi=self.tr_gen_semi, only_do_semi = self.only_do_semi, do_semi=self.do_semi, task_id=100+i)
                                train_losses_epoch_semi_intra.append(semi_loss_intra)
                                train_losses_epoch_semi_inter.append(semi_loss_inter)
                                train_losses_epoch.append(l)
                            self.tr_gen.setPart(0)
                            #self.tr_gen_semi.setPart(0)
            else:
                for _ in range(self.num_batches_per_epoch):
              
                    l = self.run_iteration(self.tr_gen, True)
                 
                    train_losses_epoch.append(l)
                    if self.epoch>self.stage_2_start_epoch:
                        for i in range(1,len(self.tasks)):
                            self.tr_gen.setPart(i)
                           
                            _ = self.run_iteration(self.tr_gen, True)
                        self.tr_gen.setPart(0)

            if len(train_losses_epoch_semi_intra) ==0:
                train_losses_epoch_semi_intra.append(0)
                train_losses_epoch_semi_inter.append(0)
            self.all_tr_losses.append(np.mean(train_losses_epoch))
            self.all_tr_intra_losses.append(np.mean(train_losses_epoch_semi_intra))
            self.all_tr_inter_losses.append(np.mean(train_losses_epoch_semi_inter))
            self.print_to_log_file("train loss : %.4f" % self.all_tr_losses[-1])
            self.print_to_log_file("train intra semi loss : %.4f" % self.all_tr_intra_losses[-1])
            self.print_to_log_file("train inter semi loss : %.4f" % self.all_tr_inter_losses[-1])


            with torch.no_grad():
                # validation with train=False
                self.network.eval()
                val_losses = []
                for b in range(self.num_val_batches_per_epoch):
                    for i in range(0,len(self.tasks)):
                        if i>4 or (self.epoch<self.stage_2_start_epoch and i>0):
                            break  # no evaluation on testing data without label
                        self.val_gen.setPart(i)
                        l,_,_ = self.run_iteration(
                            self.val_gen, False, True,
                            do_semi=False)
                        val_losses.append(l)
                self.all_val_losses.append(np.mean(val_losses))
                self.print_to_log_file("validation loss: %.4f" % self.all_val_losses[-1])

                if self.also_val_in_tr_mode:
                    self.network.train()
                    # validation with train=True
                    val_losses = []
                    for b in range(self.num_val_batches_per_epoch):
                        l = self.run_iteration(self.val_gen, False)
                        val_losses.append(l)
                    self.all_val_losses_tr_mode.append(np.mean(val_losses))
                    self.print_to_log_file("validation loss (train=True): %.4f" % self.all_val_losses_tr_mode[-1])

            self.update_train_loss_MA()  # needed for lr scheduler and stopping of training
            if self.epoch > self.stage_2_start_epoch-3:
                self.save_latest_only = False
            continue_training = self.on_epoch_end()

            epoch_end_time = time()

            if not continue_training:
                # allows for early stopping
                break

            self.epoch += 1
            self.print_to_log_file("This epoch took %f s\n" % (epoch_end_time - epoch_start_time))
            

        self.epoch -= 1  # if we don't do this we can get a problem with loading model_final_checkpoint.

        self.save_checkpoint(join(self.output_folder, "model_final_checkpoint.model"))
        # now we can delete latest as it will be identical with final
        if isfile(join(self.output_folder, "model_latest.model")):
            os.remove(join(self.output_folder, "model_latest.model"))
        if isfile(join(self.output_folder, "model_latest.model.pkl")):
            os.remove(join(self.output_folder, "model_latest.model.pkl"))
        #########################################################################################
        self.network.do_ds = ds
            # return ret


    def run_evaluation(self):
        """
        if we run with -c then we need to set the correct lr for the first epoch, otherwise it will run the first
        continued epoch with self.initial_lr

        we also need to make sure deep supervision in the network is enabled for training, thus the wrapper
        :return:
        """
        
        

        if torch.cuda.is_available():
            torch.cuda.empty_cache()

        # self._maybe_init_amp()


        flag = True
        self.print_to_log_file("\nepoch: ", self.epoch)
        epoch_start_time = time()
        # train one epoch
        for  epoch in range(481, 525):
            self.epoch = epoch
            model_path = "model_ep_{}.model".format(epoch)
            self.load_specific_checkpoint(train=False,model_name=model_path)
            with torch.no_grad():
                # validation with train=False
                self.network.eval()
                val_losses = []
                for b in range(10):
                    for i in range(0,len(self.tasks)):
                    #self.val_gen.setPart(3)
                        l = self.run_iteration(self.val_gen, False, True, task_id=100+i)
                        val_losses.append(l)
                self.all_val_losses.append(np.mean(val_losses))
                self.print_to_log_file("validation loss: %.4f" % self.all_val_losses[-1])

            #self.save_latest_only = True
            super().finish_online_evaluation()
            #self.epoch += 1
            self.print_to_log_file("This epoch took %f s\n" % (time() - epoch_start_time))
                

            #self.epoch -= 1  # if we don't do this we can get a problem with loading model_final_checkpoint.

            # return ret
